<?php

namespace Chartwell\UsersBundle\Entity;

use Doctrine\ORM\EntityRepository;

use Chartwell\CoreBundle\Toolkit\Lists;

use Doctrine\ORM\Query\Expr;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository
{
    public function getPage($page = 1, $perPage = null, $filter = null)
    {

        $qb = $this->createQueryBuilder('u')
            ->where('u.isDeleted = 0');

        $orderByColumn = isset($filter['column']) ? $filter['column'] : 'id';
        $orderByDirection =
            isset($filter['order']) && in_array($filter['order'], array('asc', 'desc'))
                ? $filter['order']
                : 'asc';

        if (!$this->getClassMetadata()->hasField($orderByColumn) && $orderByColumn !== 'group') {
            $orderByColumn = 'id';
        }

        if (!empty($filter['search'])) {
            $qb->andWhere('(
               u.firstName LIKE :search OR 
               u.lastName LIKE :search OR 
               u.email LIKE :search
            )');
            $qb->setParameter(':search', '%' . $filter['search'] . '%');
        }

        $qb->orderBy('u.' . $orderByColumn, $orderByDirection);

        return Lists::paginate($qb->getQuery(), $page, $perPage);
    }

    public function getReportUsers($division)
    {

        $rqb = $this->getEntityManager()
            ->createQueryBuilder('r')
            ->select('distinct identity(r.createdBy)')
            ->from('ChartwellModulesReportCentreBundle:Report', 'r')
            ->where('r.division = :division');

        $uqb = $this->createQueryBuilder('u');
        return $uqb->where($uqb->expr()->in('u.id', $rqb->getDQL()))
            ->setParameter('division', $division)
            ->addOrderBy('u.firstName', 'ASC')
            ->addOrderBy('u.lastName', 'ASC')
            ->getQuery()
            ->getResult();
    }

    /**
     * @param Division $division
     * @return mixed
     */
    public function getCreatorUsers(Division $division)
    {
        return $this->createQueryBuilder('u')
            ->where('u.isActive = 1')
            ->addOrderBy('u.firstName', 'ASC')
            ->addOrderBy('u.lastName', 'ASC')
            ->getQuery()
            ->execute();
    }

    public function getEngineers($queryOnly = false, $isActiveInCalendar = true)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        
        $query = $this
            ->createQueryBuilder('u')
            ->join('u.groups', 'g')
            ->join('u.workCalendarDivision', 'w')
            ->where($qb->expr()->eq('g.name', $qb->expr()->literal('Engineer')))
            ->andWhere($qb->expr()->isNotNull('w.id'))
            ->andWhere($qb->expr()->eq('u.isActive', true))
            ->andWhere($qb->expr()->eq('u.isDeleted', 0));

        if ($isActiveInCalendar !== null) {
            $query->andWhere($qb->expr()->eq('u.isActiveInCalendar', $isActiveInCalendar ? 1 : 0));
        }

        $query->addOrderBy('u.firstName');
        $query->addOrderBy('u.lastName');

        if ($queryOnly) {
            return $query;
        } else {
            return $query->getQuery()->execute();
        }
    }

    /**
     * @param $division
     * @param $startDate
     * @param $endDate
     * @param null $engineerId
     * @return mixed
     */
    public function getEngineersForCelendarWithWorks($division, $startDate, $endDate, $engineerId = null)
    {
        $qb = $this->_em->createQueryBuilder();
        $startDateQb = $qb->expr()->literal($startDate->format('Y-m-d H:i:s'));
        $endDateQb = $qb->expr()->literal($endDate->format('Y-m-d H:i:s'));
        $qbDateConditions = $qb->expr()->orX(
            $qb->expr()->andX(
                $qb->expr()->lte('works.fromDate', $startDateQb),
                $qb->expr()->gte('works.toDate', $endDateQb)
            ),
            $qb->expr()->andX(
                $qb->expr()->lte('works.fromDate', $startDateQb),
                $qb->expr()->between('works.toDate', $startDateQb, $endDateQb)
            ),
            $qb->expr()->andX(
                $qb->expr()->gte('works.fromDate', $startDateQb),
                $qb->expr()->lte('works.toDate', $endDateQb)
            ),
            $qb->expr()->andX(
                $qb->expr()->between('works.fromDate', $startDateQb, $endDateQb),
                $qb->expr()->gte('works.toDate', $endDateQb)
            )
        );
        $engineers = $this
            ->getEngineers(true, null)
            ->leftJoin('u.works', 'works')
            ->leftJoin('works.division', 'd');

        $engineers->andWhere($qb->expr()->orX(
            $qb->expr()->andX(
                $qb->expr()->eq('w.id', $division->getId()),
                $qb->expr()->eq('u.isActiveInCalendar', 1)
            ),
            $qb->expr()->andX(
                $qb->expr()->eq('w.id', $division->getId()),
                $qb->expr()->eq('u.isActiveInCalendar', 0),
                $qbDateConditions
            ),
            $qb->expr()->andX(
                $qb->expr()->neq('w.id', $division->getId()),
                $qb->expr()->eq('d.id', $division->getId()),
                $qbDateConditions
            )
        ));

        if ($engineerId) {
            $engineers->andWhere($qb->expr()->eq('u.id', $engineerId));
        }

        $result = $engineers
            ->addOrderBy('u.orderBy', 'ASC')
            ->addOrderBy('u.lastName', 'ASC')
            ->addOrderBy('u.firstName', 'ASC')
            ->getQuery()
            ->execute();

        $mainDivisionId = $division->getId();

        usort($result, function ($a, $b) use ($mainDivisionId) {
            $aDivisionId = $a->getWorkCalendarDivision()->getId();
            $bDivisionId = $b->getWorkCalendarDivision()->getId();
            if ($aDivisionId == $bDivisionId) {
                return $a->getOrderBy() > $b->getOrderBy() ? 1 : -1;
            } elseif ($aDivisionId == $mainDivisionId) {
                return -1;
            } elseif ($bDivisionId == $mainDivisionId) {
                return 1;
            } else {
                return $aDivisionId > $bDivisionId ? 1 : -1;
            }

        });

        return $result;
    }


}
